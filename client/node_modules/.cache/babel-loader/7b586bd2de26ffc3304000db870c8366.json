{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development Codes\\\\Projects\\\\movie_app_original\\\\client\\\\src\\\\components\\\\post\\\\singlepost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { setAlert } from '../../action/alert';\nimport Comment from '../movie/comment';\nimport LikeDislike from '../movie/likedislike';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SinglePost = props => {\n  _s();\n\n  const postid = props.match.params.postid;\n  const [data, setdata] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [CommentLists, setCommentLists] = useState([]);\n  const movieVariable = {\n    movieId: postid\n  };\n  useEffect(async () => {\n    const res = await axios.get(`/api/posts/${postid}`);\n    console.log(res.data);\n\n    if (res.data.success) {\n      setdata(res.data.post.content);\n      setAuthor(res.data.post.name);\n    }\n\n    axios.post('/api/comment/getComments', movieVariable).then(response => {\n      //console.log(response)\n      if (response.data.success) {\n        //console.log('response.data.comments', response.data)\n        setCommentLists(response.data.comments);\n      } else {\n        alert('Failed to get comments Info');\n      }\n    });\n  }, [postid]);\n\n  const updateComment = async newComment => {\n    await setCommentLists(CommentLists.concat(newComment));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [data === null ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 46\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(LikeDislike, {\n        movie: true,\n        userId: localStorage.getItem('userId'),\n        movieId: postid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Comment, {\n      postId: postid,\n      commentLists: CommentLists,\n      refreshFunction: updateComment,\n      movieTitle: \"this post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SinglePost, \"ldRyhvGuL1XkFR1QExC/ok8Dsao=\");\n\n_c = SinglePost;\nSinglePost.propTypes = {\n  auth: PropTypes.object.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  setAlert\n})(SinglePost);\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["C:/Web Development Codes/Projects/movie_app_original/client/src/components/post/singlepost.js"],"names":["React","useState","useEffect","Fragment","PropTypes","connect","axios","setAlert","Comment","LikeDislike","SinglePost","props","postid","match","params","data","setdata","author","setAuthor","CommentLists","setCommentLists","movieVariable","movieId","res","get","console","log","success","post","content","name","then","response","comments","alert","updateComment","newComment","concat","display","justifyContent","localStorage","getItem","propTypes","auth","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,Fragment} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux';\r\nimport axios from 'axios';\r\nimport {setAlert} from '../../action/alert';\r\nimport Comment from '../movie/comment';\r\nimport LikeDislike from '../movie/likedislike';\r\n\r\nconst SinglePost = props => {\r\n    const postid=props.match.params.postid;\r\n    const [data,setdata]=useState(\"\");\r\n    const [author,setAuthor]=useState(\"\");\r\n    const [CommentLists, setCommentLists] = useState([]);\r\n    const movieVariable = {\r\n        movieId: postid\r\n    }\r\n    useEffect(async()=>{\r\n        const res=await axios.get(`/api/posts/${postid}`);\r\n        console.log(res.data);\r\n        if(res.data.success){\r\n            setdata(res.data.post.content);\r\n            setAuthor(res.data.post.name);\r\n        }\r\n        axios.post('/api/comment/getComments', movieVariable)\r\n        .then(response => {\r\n            //console.log(response)\r\n            if (response.data.success) {\r\n                //console.log('response.data.comments', response.data)\r\n                setCommentLists(response.data.comments)\r\n            } else {\r\n                alert('Failed to get comments Info')\r\n            }\r\n        })\r\n    },[postid]);\r\n    const updateComment = async (newComment) => {\r\n        await setCommentLists(CommentLists.concat(newComment));\r\n    }\r\n    return (\r\n        <div>\r\n            {\r\n                data===null?<h1>Loading</h1>:<h1>{data}</h1>\r\n            }\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <LikeDislike movie  userId={localStorage.getItem('userId')} movieId={postid} />\r\n            </div>\r\n            {/* Comments */}\r\n            <Comment postId={postid} commentLists={CommentLists} refreshFunction={updateComment} movieTitle=\"this post\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nSinglePost.propTypes = {\r\n    auth:PropTypes.object.isRequired,\r\n    setAlert:PropTypes.func.isRequired,\r\n}\r\nconst mapStateToProps=state=>({\r\n    auth:state.auth\r\n});\r\n\r\nexport default connect(mapStateToProps,{setAlert})(SinglePost);\r\n\r\n"]},"metadata":{},"sourceType":"module"}