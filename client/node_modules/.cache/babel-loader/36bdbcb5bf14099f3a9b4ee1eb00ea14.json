{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development Codes\\\\Projects\\\\movie_app_original\\\\client\\\\src\\\\components\\\\movie\\\\singlecomment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Comment, Avatar, Button, Input } from 'antd';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../../action/alert';\nimport PropTypes from 'prop-types';\nimport LikeDislike from './likedislike';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  TextArea\n} = Input;\n\nconst SingleComment = props => {\n  _s();\n\n  const [CommentValue, setCommentValue] = useState(\"\");\n  const [OpenReply, setOpenReply] = useState(false);\n\n  const handleChange = e => {\n    setCommentValue(e.currentTarget.value);\n  };\n\n  const openReply = () => {\n    setOpenReply(!OpenReply);\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (props.auth.isAuth === false) {\n      props.setAlert(\"Please Login to add a comment\", \"danger\");\n      alert(\"Please Login to add a comment\");\n    }\n\n    if (props.auth.isAuth === true) {\n      const variables = {\n        writer: props.auth.user._id,\n        postId: props.postId,\n        responseTo: props.comment._id,\n        content: CommentValue\n      };\n      axios.post('/api/comment/saveComment', variables).then(response => {\n        if (response.data.success) {\n          setCommentValue(\"\");\n          setOpenReply(!OpenReply);\n          props.refreshFunction(response.data.result);\n        } else {\n          alert('Failed to save Comment');\n        }\n      });\n    }\n  };\n\n  const actions = [/*#__PURE__*/_jsxDEV(LikeDislike, {\n    comment: true,\n    commentId: props.comment._id,\n    userId: localStorage.getItem('userId')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: openReply,\n    children: \"Reply to \"\n  }, \"comment-basic-reply-to\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this)];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Comment, {\n      actions: actions,\n      author: props.comment.writer.name,\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        src: \"\",\n        alt: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this),\n      content: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), OpenReply && /*#__PURE__*/_jsxDEV(\"form\", {\n      style: {\n        display: 'flex'\n      },\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextArea, {\n        style: {\n          width: '100%',\n          borderRadius: '5px',\n          marginLeft: \"45px\"\n        },\n        onChange: handleChange,\n        value: CommentValue,\n        placeholder: \"write a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          width: '20%',\n          height: '52px',\n          borderRadius: \"10%\"\n        },\n        onClick: onSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SingleComment, \"XDDRhxhuXMsm8DcTcxbCxF8JuIk=\");\n\n_c = SingleComment;\nSingleComment.propTypes = {\n  auth: PropTypes.object.isRequired,\n  setAlert: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  setAlert\n})(SingleComment);\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleComment\");","map":{"version":3,"sources":["C:/Web Development Codes/Projects/movie_app_original/client/src/components/movie/singlecomment.js"],"names":["React","useState","Comment","Avatar","Button","Input","axios","connect","setAlert","PropTypes","LikeDislike","TextArea","SingleComment","props","CommentValue","setCommentValue","OpenReply","setOpenReply","handleChange","e","currentTarget","value","openReply","onSubmit","preventDefault","auth","isAuth","alert","variables","writer","user","_id","postId","responseTo","comment","content","post","then","response","data","success","refreshFunction","result","actions","localStorage","getItem","name","display","width","borderRadius","marginLeft","height","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Comment, Avatar, Button, Input } from 'antd';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport {setAlert} from '../../action/alert';\r\nimport PropTypes from 'prop-types';\r\nimport LikeDislike from './likedislike';\r\nconst { TextArea } = Input;\r\n\r\nconst SingleComment = (props) => {\r\n    const [CommentValue, setCommentValue] = useState(\"\");\r\n    const [OpenReply, setOpenReply] = useState(false);\r\n    const handleChange = (e) => {\r\n        setCommentValue(e.currentTarget.value)\r\n    }\r\n\r\n    const openReply = () => {\r\n        setOpenReply(!OpenReply)\r\n    }\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(props.auth.isAuth===false){\r\n            props.setAlert(\"Please Login to add a comment\",\"danger\");\r\n            alert(\"Please Login to add a comment\");\r\n        }\r\n        if(props.auth.isAuth===true){\r\n            const variables = {\r\n                writer: props.auth.user._id,\r\n                postId: props.postId,\r\n                responseTo: props.comment._id,\r\n                content:CommentValue\r\n            }\r\n\r\n\r\n            axios.post('/api/comment/saveComment', variables)\r\n                .then(response => {\r\n                    if (response.data.success) {\r\n                        setCommentValue(\"\")\r\n                        setOpenReply(!OpenReply)\r\n                        props.refreshFunction(response.data.result)\r\n                    } else {\r\n                        alert('Failed to save Comment')\r\n                    }\r\n                })\r\n        }\r\n    }\r\n    const actions = [\r\n        <LikeDislike comment commentId={props.comment._id} userId={localStorage.getItem('userId')} />,\r\n        <span onClick={openReply} key=\"comment-basic-reply-to\">Reply to </span>\r\n    ]\r\n    return (\r\n        <div>\r\n            <Comment\r\n                actions={actions}\r\n                author={props.comment.writer.name}\r\n                avatar={\r\n                    <Avatar\r\n                        src=\"\"\r\n                        alt=\"image\"\r\n                    />\r\n                }\r\n                content={\r\n                    <p>\r\n                        {props.comment.content}\r\n                    </p>\r\n                }\r\n            ></Comment>\r\n            {OpenReply &&\r\n                <form style={{ display: 'flex' }} onSubmit={onSubmit}>\r\n                    <TextArea\r\n                        style={{ width: '100%', borderRadius: '5px',marginLeft:\"45px\" }}\r\n                        onChange={handleChange}\r\n                        value={CommentValue}\r\n                        placeholder=\"write a comment\"\r\n                    />\r\n                    <br/>\r\n                    <Button style={{ width: '20%', height: '52px',borderRadius:\"10%\" }} onClick={onSubmit}>Submit</Button>\r\n                </form>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nSingleComment.propTypes={\r\n    auth:PropTypes.object.isRequired,\r\n    setAlert:PropTypes.func.isRequired,\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    auth:state.auth\r\n});\r\nexport default connect(mapStateToProps,{setAlert})(SingleComment);\r\n"]},"metadata":{},"sourceType":"module"}