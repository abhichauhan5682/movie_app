{"ast":null,"code":"var _jsxFileName = \"C:\\\\Web Development Codes\\\\Projects\\\\movie_app_original\\\\client\\\\src\\\\components\\\\movie\\\\moviedetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { API_URL, API_KEY, IMAGE_URL } from '../../config/default';\nimport MainImage from '../sections/mainimage';\nimport MovieInfo from './movieinfo';\nimport { Button, Row } from 'antd';\nimport { Fragment } from 'react';\nimport GridCard from '../sections/gridcard';\nimport FavouriteButton from './favouritebutton';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport Comment from './comment';\nimport axios from 'axios';\nimport LikeDislike from './likedislike';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetail = props => {\n  _s();\n\n  //console.log(props);\n  const movieId = props.match.params.movieId;\n  const [Movie, setMovie] = useState([]);\n  const [Crew, setCrew] = useState([]);\n  const [ActorView, setActorView] = useState(false);\n  const [LoadingForMovie, setLoadingForMovie] = useState(true);\n  const [LoadingForCasts, setLoadingForCasts] = useState(true);\n  const [CommentLists, setCommentLists] = useState([]);\n  const movieVariable = {\n    movieId: movieId\n  };\n  let userId = null;\n\n  if (props.isAuth === true && props.user !== null) {\n    userId = props.user._id;\n    console.log(\"heloo user\");\n  }\n\n  useEffect(() => {\n    let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    fetchDetailInfo(endpointForMovieInfo);\n    axios.post('/api/comment/getComments', movieVariable).then(response => {\n      //console.log(response)\n      if (response.data.success) {\n        //console.log('response.data.comments', response.data.comments)\n        setCommentLists(response.data.comments);\n      } else {\n        alert('Failed to get comments Info');\n      }\n    });\n  }, []);\n\n  const fetchDetailInfo = endpoint => {\n    fetch(endpoint).then(result => result.json()).then(result => {\n      setMovie(result);\n      setLoadingForMovie(false);\n      let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      fetch(endpointForCasts).then(result => result.json()).then(result => {\n        setCrew(result.cast);\n      });\n      setLoadingForCasts(false);\n    }).catch(error => console.error('Error:', error));\n  };\n\n  const updateComment = newComment => {\n    setCommentLists(CommentLists.concat(newComment));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!LoadingForMovie && /*#__PURE__*/_jsxDEV(MainImage, {\n      image: `${IMAGE_URL}w1280${Movie.backdrop_path}`,\n      title: Movie.original_title,\n      text: Movie.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '85%',\n        margin: '1rem auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'flex-end'\n        },\n        children: props.user !== null && props.auth.isAuth ? /*#__PURE__*/_jsxDEV(FavouriteButton, {\n          userFrom: props.user._id,\n          movieId: movieId,\n          movieInfo: Movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/login\",\n            children: \"Add To Favourite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), !LoadingForMovie && /*#__PURE__*/_jsxDEV(MovieInfo, {\n        movie: Movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setActorView(!ActorView),\n          children: \"Toggle Actor View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), ActorView && /*#__PURE__*/_jsxDEV(Row, {\n        gutter: [16, 16],\n        children: !LoadingForCasts && Crew.map((crew, index) => /*#__PURE__*/_jsxDEV(Fragment, {\n          children: crew.profile_path && /*#__PURE__*/_jsxDEV(GridCard, {\n            actor: true,\n            image: crew.profile_path,\n            characterName: crew.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 41\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(LikeDislike, {\n          movie: true,\n          userId: localStorage.getItem('userId'),\n          movieId: movieId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Comment, {\n        movieTitle: Movie.original_title,\n        commentLists: CommentLists,\n        postId: movieId,\n        refreshFunction: updateComment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetail, \"hZZnD94hkWZR8NB3bkCFLNTuI+A=\");\n\n_c = MovieDetail;\nMovieDetail.propTypes = {\n  isAuth: PropTypes.bool.isRequired,\n  user: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  isAuth: state.auth.isAuth,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, {})(MovieDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"sources":["C:/Web Development Codes/Projects/movie_app_original/client/src/components/movie/moviedetail.js"],"names":["React","useEffect","useState","connect","PropTypes","API_URL","API_KEY","IMAGE_URL","MainImage","MovieInfo","Button","Row","Fragment","GridCard","FavouriteButton","Redirect","Link","Comment","axios","LikeDislike","MovieDetail","props","movieId","match","params","Movie","setMovie","Crew","setCrew","ActorView","setActorView","LoadingForMovie","setLoadingForMovie","LoadingForCasts","setLoadingForCasts","CommentLists","setCommentLists","movieVariable","userId","isAuth","user","_id","console","log","endpointForMovieInfo","fetchDetailInfo","post","then","response","data","success","comments","alert","endpoint","fetch","result","json","endpointForCasts","cast","catch","error","updateComment","newComment","concat","backdrop_path","original_title","overview","width","margin","display","justifyContent","auth","map","crew","index","profile_path","name","localStorage","getItem","propTypes","bool","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\nimport {API_URL,API_KEY,IMAGE_URL} from '../../config/default';\r\nimport MainImage from '../sections/mainimage';\r\nimport MovieInfo from './movieinfo';\r\nimport {Button,Row} from 'antd';\r\nimport { Fragment } from 'react';\r\nimport GridCard from '../sections/gridcard';\r\nimport FavouriteButton from './favouritebutton';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport Comment from './comment';\r\nimport axios from 'axios';\r\nimport LikeDislike from './likedislike';\r\n\r\n\r\nconst MovieDetail = (props) => {\r\n    //console.log(props);\r\n    const movieId=props.match.params.movieId;\r\n    const [Movie,setMovie]=useState([]);\r\n    const [Crew,setCrew]=useState([]);\r\n    const [ActorView,setActorView]=useState(false);\r\n    const [LoadingForMovie, setLoadingForMovie] = useState(true)\r\n    const [LoadingForCasts, setLoadingForCasts] = useState(true)\r\n    const [CommentLists, setCommentLists] = useState([])\r\n    const movieVariable = {\r\n        movieId: movieId\r\n    }\r\n    let userId=null;\r\n    if(props.isAuth===true && props.user!==null){\r\n        userId=props.user._id;\r\n        console.log(\"heloo user\");\r\n    }\r\n    useEffect(()=>{\r\n        let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\r\n        fetchDetailInfo(endpointForMovieInfo)\r\n\r\n        axios.post('/api/comment/getComments', movieVariable)\r\n        .then(response => {\r\n            //console.log(response)\r\n            if (response.data.success) {\r\n                //console.log('response.data.comments', response.data.comments)\r\n                setCommentLists(response.data.comments)\r\n            } else {\r\n                alert('Failed to get comments Info')\r\n            }\r\n        })\r\n\r\n    },[]);\r\n    const fetchDetailInfo = (endpoint) => {\r\n        fetch(endpoint)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                setMovie(result)\r\n                setLoadingForMovie(false)\r\n\r\n                let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n                fetch(endpointForCasts)\r\n                    .then(result => result.json())\r\n                    .then(result => {\r\n                        setCrew(result.cast)\r\n                    })\r\n\r\n                setLoadingForCasts(false)\r\n            })\r\n            .catch(error => console.error('Error:', error)\r\n            )\r\n    }\r\n    const updateComment = (newComment) => {\r\n        setCommentLists(CommentLists.concat(newComment));\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                !LoadingForMovie &&\r\n                <MainImage\r\n                    image={`${IMAGE_URL}w1280${Movie.backdrop_path}`}\r\n                    title={Movie.original_title}\r\n                    text={Movie.overview}\r\n\r\n                />\r\n            }\r\n            <div style={{ width: '85%', margin: '1rem auto' }}>\r\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                   {props.user!==null&&props.auth.isAuth? \r\n                        <FavouriteButton\r\n                            userFrom={props.user._id}\r\n                            movieId={movieId}\r\n                            movieInfo={Movie}\r\n                        />\r\n                        :\r\n                        <Button>\r\n                            <Link to=\"/login\">\r\n                                Add To Favourite\r\n                            </Link>\r\n                        </Button>\r\n                    }\r\n                </div>\r\n\r\n                {   \r\n                    !LoadingForMovie&&\r\n                    <MovieInfo movie={Movie}/>\r\n                }\r\n                <br/>\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                   <Button onClick={()=>setActorView(!ActorView)}>Toggle Actor View</Button>\r\n                </div>\r\n                <br/>\r\n                {\r\n                    ActorView &&\r\n                    <Row gutter={[16,16]}>\r\n                        {\r\n                            !LoadingForCasts&&\r\n                            Crew.map((crew,index)=>(\r\n                                <Fragment key={index}>\r\n                                    {\r\n                                        crew.profile_path&& \r\n                                        <GridCard\r\n                                            actor \r\n                                            image={crew.profile_path} \r\n                                            characterName={crew.name}\r\n                                        />\r\n                                    }\r\n                                </Fragment>\r\n                            ))\r\n                        }\r\n                    </Row>\r\n                }\r\n\r\n                {/* likes & dislikes */}\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <LikeDislike movie  userId={localStorage.getItem('userId')} movieId={movieId} />\r\n                </div>\r\n\r\n                {/* Comments */}\r\n                <Comment movieTitle={Movie.original_title}  commentLists={CommentLists} postId={movieId} refreshFunction={updateComment}/>\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nMovieDetail.propTypes={\r\n    isAuth:PropTypes.bool.isRequired,\r\n    user:PropTypes.object,\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n    isAuth:state.auth.isAuth,\r\n    user:state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps,{})(MovieDetail);\r\n"]},"metadata":{},"sourceType":"module"}